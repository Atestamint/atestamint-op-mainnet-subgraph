// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class BatchMetadataUpdate extends ethereum.Event {
  get params(): BatchMetadataUpdate__Params {
    return new BatchMetadataUpdate__Params(this);
  }
}

export class BatchMetadataUpdate__Params {
  _event: BatchMetadataUpdate;

  constructor(event: BatchMetadataUpdate) {
    this._event = event;
  }

  get _fromTokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _toTokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class BeaconUpgraded extends ethereum.Event {
  get params(): BeaconUpgraded__Params {
    return new BeaconUpgraded__Params(this);
  }
}

export class BeaconUpgraded__Params {
  _event: BeaconUpgraded;

  constructor(event: BeaconUpgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class FundsReceived extends ethereum.Event {
  get params(): FundsReceived__Params {
    return new FundsReceived__Params(this);
  }
}

export class FundsReceived__Params {
  _event: FundsReceived;

  constructor(event: FundsReceived) {
    this._event = event;
  }

  get source(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class FundsRecipientChanged extends ethereum.Event {
  get params(): FundsRecipientChanged__Params {
    return new FundsRecipientChanged__Params(this);
  }
}

export class FundsRecipientChanged__Params {
  _event: FundsRecipientChanged;

  constructor(event: FundsRecipientChanged) {
    this._event = event;
  }

  get newAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get changedBy(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class FundsWithdrawn extends ethereum.Event {
  get params(): FundsWithdrawn__Params {
    return new FundsWithdrawn__Params(this);
  }
}

export class FundsWithdrawn__Params {
  _event: FundsWithdrawn;

  constructor(event: FundsWithdrawn) {
    this._event = event;
  }

  get withdrawnBy(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get withdrawnTo(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get feeRecipient(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get feeAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class MetadataUpdate extends ethereum.Event {
  get params(): MetadataUpdate__Params {
    return new MetadataUpdate__Params(this);
  }
}

export class MetadataUpdate__Params {
  _event: MetadataUpdate;

  constructor(event: MetadataUpdate) {
    this._event = event;
  }

  get _tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class MintComment extends ethereum.Event {
  get params(): MintComment__Params {
    return new MintComment__Params(this);
  }
}

export class MintComment__Params {
  _event: MintComment;

  constructor(event: MintComment) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenContract(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get quantity(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get comment(): string {
    return this._event.parameters[4].value.toString();
  }
}

export class MintFeePayout extends ethereum.Event {
  get params(): MintFeePayout__Params {
    return new MintFeePayout__Params(this);
  }
}

export class MintFeePayout__Params {
  _event: MintFeePayout;

  constructor(event: MintFeePayout) {
    this._event = event;
  }

  get mintFeeAmount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get mintFeeRecipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get success(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class OpenMintFinalized extends ethereum.Event {
  get params(): OpenMintFinalized__Params {
    return new OpenMintFinalized__Params(this);
  }
}

export class OpenMintFinalized__Params {
  _event: OpenMintFinalized;

  constructor(event: OpenMintFinalized) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get numberOfMints(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnerCanceled extends ethereum.Event {
  get params(): OwnerCanceled__Params {
    return new OwnerCanceled__Params(this);
  }
}

export class OwnerCanceled__Params {
  _event: OwnerCanceled;

  constructor(event: OwnerCanceled) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get potentialNewOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnerPending extends ethereum.Event {
  get params(): OwnerPending__Params {
    return new OwnerPending__Params(this);
  }
}

export class OwnerPending__Params {
  _event: OwnerPending;

  constructor(event: OwnerPending) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get potentialNewOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Sale extends ethereum.Event {
  get params(): Sale__Params {
    return new Sale__Params(this);
  }
}

export class Sale__Params {
  _event: Sale;

  constructor(event: Sale) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get quantity(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get pricePerToken(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get firstPurchasedTokenId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class SalesConfigChanged extends ethereum.Event {
  get params(): SalesConfigChanged__Params {
    return new SalesConfigChanged__Params(this);
  }
}

export class SalesConfigChanged__Params {
  _event: SalesConfigChanged;

  constructor(event: SalesConfigChanged) {
    this._event = event;
  }

  get changedBy(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UpdatedMetadataRenderer extends ethereum.Event {
  get params(): UpdatedMetadataRenderer__Params {
    return new UpdatedMetadataRenderer__Params(this);
  }
}

export class UpdatedMetadataRenderer__Params {
  _event: UpdatedMetadataRenderer;

  constructor(event: UpdatedMetadataRenderer) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get renderer(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ERC721Drop__computeFreeMintRewardsResultValue0Struct extends ethereum.Tuple {
  get creatorReward(): BigInt {
    return this[0].toBigInt();
  }

  get createReferralReward(): BigInt {
    return this[1].toBigInt();
  }

  get mintReferralReward(): BigInt {
    return this[2].toBigInt();
  }

  get firstMinterReward(): BigInt {
    return this[3].toBigInt();
  }

  get zoraReward(): BigInt {
    return this[4].toBigInt();
  }
}

export class ERC721Drop__computePaidMintRewardsResultValue0Struct extends ethereum.Tuple {
  get creatorReward(): BigInt {
    return this[0].toBigInt();
  }

  get createReferralReward(): BigInt {
    return this[1].toBigInt();
  }

  get mintReferralReward(): BigInt {
    return this[2].toBigInt();
  }

  get firstMinterReward(): BigInt {
    return this[3].toBigInt();
  }

  get zoraReward(): BigInt {
    return this[4].toBigInt();
  }
}

export class ERC721Drop__configResult {
  value0: Address;
  value1: BigInt;
  value2: i32;
  value3: Address;

  constructor(value0: Address, value1: BigInt, value2: i32, value3: Address) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    return map;
  }

  getMetadataRenderer(): Address {
    return this.value0;
  }

  getEditionSize(): BigInt {
    return this.value1;
  }

  getRoyaltyBPS(): i32 {
    return this.value2;
  }

  getFundsRecipient(): Address {
    return this.value3;
  }
}

export class ERC721Drop__mintedPerAddressResultValue0Struct extends ethereum.Tuple {
  get totalMints(): BigInt {
    return this[0].toBigInt();
  }

  get presaleMints(): BigInt {
    return this[1].toBigInt();
  }

  get publicMints(): BigInt {
    return this[2].toBigInt();
  }
}

export class ERC721Drop__royaltyInfoResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getReceiver(): Address {
    return this.value0;
  }

  getRoyaltyAmount(): BigInt {
    return this.value1;
  }
}

export class ERC721Drop__saleDetailsResultValue0Struct extends ethereum.Tuple {
  get publicSaleActive(): boolean {
    return this[0].toBoolean();
  }

  get presaleActive(): boolean {
    return this[1].toBoolean();
  }

  get publicSalePrice(): BigInt {
    return this[2].toBigInt();
  }

  get publicSaleStart(): BigInt {
    return this[3].toBigInt();
  }

  get publicSaleEnd(): BigInt {
    return this[4].toBigInt();
  }

  get presaleStart(): BigInt {
    return this[5].toBigInt();
  }

  get presaleEnd(): BigInt {
    return this[6].toBigInt();
  }

  get presaleMerkleRoot(): Bytes {
    return this[7].toBytes();
  }

  get maxSalePurchasePerAddress(): BigInt {
    return this[8].toBigInt();
  }

  get totalMinted(): BigInt {
    return this[9].toBigInt();
  }

  get maxSupply(): BigInt {
    return this[10].toBigInt();
  }
}

export class ERC721Drop__salesConfigResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: Bytes;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: Bytes
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromFixedBytes(this.value6));
    return map;
  }

  getPublicSalePrice(): BigInt {
    return this.value0;
  }

  getMaxSalePurchasePerAddress(): BigInt {
    return this.value1;
  }

  getPublicSaleStart(): BigInt {
    return this.value2;
  }

  getPublicSaleEnd(): BigInt {
    return this.value3;
  }

  getPresaleStart(): BigInt {
    return this.value4;
  }

  getPresaleEnd(): BigInt {
    return this.value5;
  }

  getPresaleMerkleRoot(): Bytes {
    return this.value6;
  }
}

export class ERC721Drop__zoraFeeForAmountResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getRecipient(): Address {
    return this.value0;
  }

  getFee(): BigInt {
    return this.value1;
  }
}

export class ERC721Drop extends ethereum.SmartContract {
  static bind(address: Address): ERC721Drop {
    return new ERC721Drop("ERC721Drop", address);
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  MINTER_ROLE(): Bytes {
    let result = super.call("MINTER_ROLE", "MINTER_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_MINTER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("MINTER_ROLE", "MINTER_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  SALES_MANAGER_ROLE(): Bytes {
    let result = super.call(
      "SALES_MANAGER_ROLE",
      "SALES_MANAGER_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_SALES_MANAGER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "SALES_MANAGER_ROLE",
      "SALES_MANAGER_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  adminMint(recipient: Address, quantity: BigInt): BigInt {
    let result = super.call(
      "adminMint",
      "adminMint(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(quantity)
      ]
    );

    return result[0].toBigInt();
  }

  try_adminMint(
    recipient: Address,
    quantity: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "adminMint",
      "adminMint(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(quantity)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  adminMintAirdrop(recipients: Array<Address>): BigInt {
    let result = super.call(
      "adminMintAirdrop",
      "adminMintAirdrop(address[]):(uint256)",
      [ethereum.Value.fromAddressArray(recipients)]
    );

    return result[0].toBigInt();
  }

  try_adminMintAirdrop(
    recipients: Array<Address>
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "adminMintAirdrop",
      "adminMintAirdrop(address[]):(uint256)",
      [ethereum.Value.fromAddressArray(recipients)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  callMetadataRenderer(data: Bytes): Bytes {
    let result = super.call(
      "callMetadataRenderer",
      "callMetadataRenderer(bytes):(bytes)",
      [ethereum.Value.fromBytes(data)]
    );

    return result[0].toBytes();
  }

  try_callMetadataRenderer(data: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "callMetadataRenderer",
      "callMetadataRenderer(bytes):(bytes)",
      [ethereum.Value.fromBytes(data)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  computeFreeMintRewards(
    numTokens: BigInt
  ): ERC721Drop__computeFreeMintRewardsResultValue0Struct {
    let result = super.call(
      "computeFreeMintRewards",
      "computeFreeMintRewards(uint256):((uint256,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(numTokens)]
    );

    return changetype<ERC721Drop__computeFreeMintRewardsResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_computeFreeMintRewards(
    numTokens: BigInt
  ): ethereum.CallResult<ERC721Drop__computeFreeMintRewardsResultValue0Struct> {
    let result = super.tryCall(
      "computeFreeMintRewards",
      "computeFreeMintRewards(uint256):((uint256,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(numTokens)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<ERC721Drop__computeFreeMintRewardsResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  computePaidMintRewards(
    numTokens: BigInt
  ): ERC721Drop__computePaidMintRewardsResultValue0Struct {
    let result = super.call(
      "computePaidMintRewards",
      "computePaidMintRewards(uint256):((uint256,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(numTokens)]
    );

    return changetype<ERC721Drop__computePaidMintRewardsResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_computePaidMintRewards(
    numTokens: BigInt
  ): ethereum.CallResult<ERC721Drop__computePaidMintRewardsResultValue0Struct> {
    let result = super.tryCall(
      "computePaidMintRewards",
      "computePaidMintRewards(uint256):((uint256,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(numTokens)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<ERC721Drop__computePaidMintRewardsResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  computeTotalReward(numTokens: BigInt): BigInt {
    let result = super.call(
      "computeTotalReward",
      "computeTotalReward(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(numTokens)]
    );

    return result[0].toBigInt();
  }

  try_computeTotalReward(numTokens: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "computeTotalReward",
      "computeTotalReward(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(numTokens)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  config(): ERC721Drop__configResult {
    let result = super.call(
      "config",
      "config():(address,uint64,uint16,address)",
      []
    );

    return new ERC721Drop__configResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toI32(),
      result[3].toAddress()
    );
  }

  try_config(): ethereum.CallResult<ERC721Drop__configResult> {
    let result = super.tryCall(
      "config",
      "config():(address,uint64,uint16,address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ERC721Drop__configResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toI32(),
        value[3].toAddress()
      )
    );
  }

  contractURI(): string {
    let result = super.call("contractURI", "contractURI():(string)", []);

    return result[0].toString();
  }

  try_contractURI(): ethereum.CallResult<string> {
    let result = super.tryCall("contractURI", "contractURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  contractVersion(): BigInt {
    let result = super.call(
      "contractVersion",
      "contractVersion():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_contractVersion(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "contractVersion",
      "contractVersion():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createReferral(): Address {
    let result = super.call("createReferral", "createReferral():(address)", []);

    return result[0].toAddress();
  }

  try_createReferral(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createReferral",
      "createReferral():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  factoryUpgradeGate(): Address {
    let result = super.call(
      "factoryUpgradeGate",
      "factoryUpgradeGate():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_factoryUpgradeGate(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "factoryUpgradeGate",
      "factoryUpgradeGate():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isAdmin(user: Address): boolean {
    let result = super.call("isAdmin", "isAdmin(address):(bool)", [
      ethereum.Value.fromAddress(user)
    ]);

    return result[0].toBoolean();
  }

  try_isAdmin(user: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isAdmin", "isAdmin(address):(bool)", [
      ethereum.Value.fromAddress(user)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedForAll(nftOwner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(nftOwner),
        ethereum.Value.fromAddress(operator)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    nftOwner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(nftOwner),
        ethereum.Value.fromAddress(operator)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  marketFilterDAOAddress(): Address {
    let result = super.call(
      "marketFilterDAOAddress",
      "marketFilterDAOAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_marketFilterDAOAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "marketFilterDAOAddress",
      "marketFilterDAOAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  metadataRenderer(): Address {
    let result = super.call(
      "metadataRenderer",
      "metadataRenderer():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_metadataRenderer(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "metadataRenderer",
      "metadataRenderer():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  mintedPerAddress(
    minter: Address
  ): ERC721Drop__mintedPerAddressResultValue0Struct {
    let result = super.call(
      "mintedPerAddress",
      "mintedPerAddress(address):((uint256,uint256,uint256))",
      [ethereum.Value.fromAddress(minter)]
    );

    return changetype<ERC721Drop__mintedPerAddressResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_mintedPerAddress(
    minter: Address
  ): ethereum.CallResult<ERC721Drop__mintedPerAddressResultValue0Struct> {
    let result = super.tryCall(
      "mintedPerAddress",
      "mintedPerAddress(address):((uint256,uint256,uint256))",
      [ethereum.Value.fromAddress(minter)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<ERC721Drop__mintedPerAddressResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  multicall(data: Array<Bytes>): Array<Bytes> {
    let result = super.call("multicall", "multicall(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data)
    ]);

    return result[0].toBytesArray();
  }

  try_multicall(data: Array<Bytes>): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall("multicall", "multicall(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  presaleMintsByAddress(param0: Address): BigInt {
    let result = super.call(
      "presaleMintsByAddress",
      "presaleMintsByAddress(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_presaleMintsByAddress(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "presaleMintsByAddress",
      "presaleMintsByAddress(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  royaltyInfo(
    param0: BigInt,
    _salePrice: BigInt
  ): ERC721Drop__royaltyInfoResult {
    let result = super.call(
      "royaltyInfo",
      "royaltyInfo(uint256,uint256):(address,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(_salePrice)
      ]
    );

    return new ERC721Drop__royaltyInfoResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_royaltyInfo(
    param0: BigInt,
    _salePrice: BigInt
  ): ethereum.CallResult<ERC721Drop__royaltyInfoResult> {
    let result = super.tryCall(
      "royaltyInfo",
      "royaltyInfo(uint256,uint256):(address,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(_salePrice)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ERC721Drop__royaltyInfoResult(
        value[0].toAddress(),
        value[1].toBigInt()
      )
    );
  }

  royaltyMintSchedule(): BigInt {
    let result = super.call(
      "royaltyMintSchedule",
      "royaltyMintSchedule():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_royaltyMintSchedule(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "royaltyMintSchedule",
      "royaltyMintSchedule():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  saleDetails(): ERC721Drop__saleDetailsResultValue0Struct {
    let result = super.call(
      "saleDetails",
      "saleDetails():((bool,bool,uint256,uint64,uint64,uint64,uint64,bytes32,uint256,uint256,uint256))",
      []
    );

    return changetype<ERC721Drop__saleDetailsResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_saleDetails(): ethereum.CallResult<
    ERC721Drop__saleDetailsResultValue0Struct
  > {
    let result = super.tryCall(
      "saleDetails",
      "saleDetails():((bool,bool,uint256,uint64,uint64,uint64,uint64,bytes32,uint256,uint256,uint256))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<ERC721Drop__saleDetailsResultValue0Struct>(value[0].toTuple())
    );
  }

  salesConfig(): ERC721Drop__salesConfigResult {
    let result = super.call(
      "salesConfig",
      "salesConfig():(uint104,uint32,uint64,uint64,uint64,uint64,bytes32)",
      []
    );

    return new ERC721Drop__salesConfigResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBytes()
    );
  }

  try_salesConfig(): ethereum.CallResult<ERC721Drop__salesConfigResult> {
    let result = super.tryCall(
      "salesConfig",
      "salesConfig():(uint104,uint32,uint64,uint64,uint64,uint64,bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ERC721Drop__salesConfigResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBytes()
      )
    );
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  updateMarketFilterSettings(args: Bytes): Bytes {
    let result = super.call(
      "updateMarketFilterSettings",
      "updateMarketFilterSettings(bytes):(bytes)",
      [ethereum.Value.fromBytes(args)]
    );

    return result[0].toBytes();
  }

  try_updateMarketFilterSettings(args: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "updateMarketFilterSettings",
      "updateMarketFilterSettings(bytes):(bytes)",
      [ethereum.Value.fromBytes(args)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  zoraERC721TransferHelper(): Address {
    let result = super.call(
      "zoraERC721TransferHelper",
      "zoraERC721TransferHelper():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_zoraERC721TransferHelper(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "zoraERC721TransferHelper",
      "zoraERC721TransferHelper():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  zoraFeeForAmount(quantity: BigInt): ERC721Drop__zoraFeeForAmountResult {
    let result = super.call(
      "zoraFeeForAmount",
      "zoraFeeForAmount(uint256):(address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(quantity)]
    );

    return new ERC721Drop__zoraFeeForAmountResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_zoraFeeForAmount(
    quantity: BigInt
  ): ethereum.CallResult<ERC721Drop__zoraFeeForAmountResult> {
    let result = super.tryCall(
      "zoraFeeForAmount",
      "zoraFeeForAmount(uint256):(address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(quantity)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ERC721Drop__zoraFeeForAmountResult(
        value[0].toAddress(),
        value[1].toBigInt()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _zoraERC721TransferHelper(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _factoryUpgradeGate(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _marketFilterDAOAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _mintFeeAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _mintFeeRecipient(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _protocolRewards(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AdminMintCall extends ethereum.Call {
  get inputs(): AdminMintCall__Inputs {
    return new AdminMintCall__Inputs(this);
  }

  get outputs(): AdminMintCall__Outputs {
    return new AdminMintCall__Outputs(this);
  }
}

export class AdminMintCall__Inputs {
  _call: AdminMintCall;

  constructor(call: AdminMintCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get quantity(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AdminMintCall__Outputs {
  _call: AdminMintCall;

  constructor(call: AdminMintCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class AdminMintAirdropCall extends ethereum.Call {
  get inputs(): AdminMintAirdropCall__Inputs {
    return new AdminMintAirdropCall__Inputs(this);
  }

  get outputs(): AdminMintAirdropCall__Outputs {
    return new AdminMintAirdropCall__Outputs(this);
  }
}

export class AdminMintAirdropCall__Inputs {
  _call: AdminMintAirdropCall;

  constructor(call: AdminMintAirdropCall) {
    this._call = call;
  }

  get recipients(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class AdminMintAirdropCall__Outputs {
  _call: AdminMintAirdropCall;

  constructor(call: AdminMintAirdropCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class CallMetadataRendererCall extends ethereum.Call {
  get inputs(): CallMetadataRendererCall__Inputs {
    return new CallMetadataRendererCall__Inputs(this);
  }

  get outputs(): CallMetadataRendererCall__Outputs {
    return new CallMetadataRendererCall__Outputs(this);
  }
}

export class CallMetadataRendererCall__Inputs {
  _call: CallMetadataRendererCall;

  constructor(call: CallMetadataRendererCall) {
    this._call = call;
  }

  get data(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class CallMetadataRendererCall__Outputs {
  _call: CallMetadataRendererCall;

  constructor(call: CallMetadataRendererCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class FinalizeOpenEditionCall extends ethereum.Call {
  get inputs(): FinalizeOpenEditionCall__Inputs {
    return new FinalizeOpenEditionCall__Inputs(this);
  }

  get outputs(): FinalizeOpenEditionCall__Outputs {
    return new FinalizeOpenEditionCall__Outputs(this);
  }
}

export class FinalizeOpenEditionCall__Inputs {
  _call: FinalizeOpenEditionCall;

  constructor(call: FinalizeOpenEditionCall) {
    this._call = call;
  }
}

export class FinalizeOpenEditionCall__Outputs {
  _call: FinalizeOpenEditionCall;

  constructor(call: FinalizeOpenEditionCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _contractName(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _contractSymbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _initialOwner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _fundsRecipient(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _editionSize(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _royaltyBPS(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get _setupCalls(): Array<Bytes> {
    return this._call.inputValues[6].value.toBytesArray();
  }

  get _metadataRenderer(): Address {
    return this._call.inputValues[7].value.toAddress();
  }

  get _metadataRendererInit(): Bytes {
    return this._call.inputValues[8].value.toBytes();
  }

  get _createReferral(): Address {
    return this._call.inputValues[9].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class ManageMarketFilterDAOSubscriptionCall extends ethereum.Call {
  get inputs(): ManageMarketFilterDAOSubscriptionCall__Inputs {
    return new ManageMarketFilterDAOSubscriptionCall__Inputs(this);
  }

  get outputs(): ManageMarketFilterDAOSubscriptionCall__Outputs {
    return new ManageMarketFilterDAOSubscriptionCall__Outputs(this);
  }
}

export class ManageMarketFilterDAOSubscriptionCall__Inputs {
  _call: ManageMarketFilterDAOSubscriptionCall;

  constructor(call: ManageMarketFilterDAOSubscriptionCall) {
    this._call = call;
  }

  get enable(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class ManageMarketFilterDAOSubscriptionCall__Outputs {
  _call: ManageMarketFilterDAOSubscriptionCall;

  constructor(call: ManageMarketFilterDAOSubscriptionCall) {
    this._call = call;
  }
}

export class MintWithRewardsCall extends ethereum.Call {
  get inputs(): MintWithRewardsCall__Inputs {
    return new MintWithRewardsCall__Inputs(this);
  }

  get outputs(): MintWithRewardsCall__Outputs {
    return new MintWithRewardsCall__Outputs(this);
  }
}

export class MintWithRewardsCall__Inputs {
  _call: MintWithRewardsCall;

  constructor(call: MintWithRewardsCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get quantity(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get comment(): string {
    return this._call.inputValues[2].value.toString();
  }

  get mintReferral(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class MintWithRewardsCall__Outputs {
  _call: MintWithRewardsCall;

  constructor(call: MintWithRewardsCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MulticallCall extends ethereum.Call {
  get inputs(): MulticallCall__Inputs {
    return new MulticallCall__Inputs(this);
  }

  get outputs(): MulticallCall__Outputs {
    return new MulticallCall__Outputs(this);
  }
}

export class MulticallCall__Inputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get data(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class MulticallCall__Outputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get results(): Array<Bytes> {
    return this._call.outputValues[0].value.toBytesArray();
  }
}

export class PurchaseCall extends ethereum.Call {
  get inputs(): PurchaseCall__Inputs {
    return new PurchaseCall__Inputs(this);
  }

  get outputs(): PurchaseCall__Outputs {
    return new PurchaseCall__Outputs(this);
  }
}

export class PurchaseCall__Inputs {
  _call: PurchaseCall;

  constructor(call: PurchaseCall) {
    this._call = call;
  }

  get quantity(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class PurchaseCall__Outputs {
  _call: PurchaseCall;

  constructor(call: PurchaseCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PurchasePresaleCall extends ethereum.Call {
  get inputs(): PurchasePresaleCall__Inputs {
    return new PurchasePresaleCall__Inputs(this);
  }

  get outputs(): PurchasePresaleCall__Outputs {
    return new PurchasePresaleCall__Outputs(this);
  }
}

export class PurchasePresaleCall__Inputs {
  _call: PurchasePresaleCall;

  constructor(call: PurchasePresaleCall) {
    this._call = call;
  }

  get quantity(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get maxQuantity(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get pricePerToken(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get merkleProof(): Array<Bytes> {
    return this._call.inputValues[3].value.toBytesArray();
  }
}

export class PurchasePresaleCall__Outputs {
  _call: PurchasePresaleCall;

  constructor(call: PurchasePresaleCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PurchasePresaleWithCommentCall extends ethereum.Call {
  get inputs(): PurchasePresaleWithCommentCall__Inputs {
    return new PurchasePresaleWithCommentCall__Inputs(this);
  }

  get outputs(): PurchasePresaleWithCommentCall__Outputs {
    return new PurchasePresaleWithCommentCall__Outputs(this);
  }
}

export class PurchasePresaleWithCommentCall__Inputs {
  _call: PurchasePresaleWithCommentCall;

  constructor(call: PurchasePresaleWithCommentCall) {
    this._call = call;
  }

  get quantity(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get maxQuantity(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get pricePerToken(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get merkleProof(): Array<Bytes> {
    return this._call.inputValues[3].value.toBytesArray();
  }

  get comment(): string {
    return this._call.inputValues[4].value.toString();
  }
}

export class PurchasePresaleWithCommentCall__Outputs {
  _call: PurchasePresaleWithCommentCall;

  constructor(call: PurchasePresaleWithCommentCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PurchasePresaleWithRewardsCall extends ethereum.Call {
  get inputs(): PurchasePresaleWithRewardsCall__Inputs {
    return new PurchasePresaleWithRewardsCall__Inputs(this);
  }

  get outputs(): PurchasePresaleWithRewardsCall__Outputs {
    return new PurchasePresaleWithRewardsCall__Outputs(this);
  }
}

export class PurchasePresaleWithRewardsCall__Inputs {
  _call: PurchasePresaleWithRewardsCall;

  constructor(call: PurchasePresaleWithRewardsCall) {
    this._call = call;
  }

  get quantity(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get maxQuantity(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get pricePerToken(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get merkleProof(): Array<Bytes> {
    return this._call.inputValues[3].value.toBytesArray();
  }

  get comment(): string {
    return this._call.inputValues[4].value.toString();
  }

  get mintReferral(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class PurchasePresaleWithRewardsCall__Outputs {
  _call: PurchasePresaleWithRewardsCall;

  constructor(call: PurchasePresaleWithRewardsCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PurchaseWithCommentCall extends ethereum.Call {
  get inputs(): PurchaseWithCommentCall__Inputs {
    return new PurchaseWithCommentCall__Inputs(this);
  }

  get outputs(): PurchaseWithCommentCall__Outputs {
    return new PurchaseWithCommentCall__Outputs(this);
  }
}

export class PurchaseWithCommentCall__Inputs {
  _call: PurchaseWithCommentCall;

  constructor(call: PurchaseWithCommentCall) {
    this._call = call;
  }

  get quantity(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get comment(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class PurchaseWithCommentCall__Outputs {
  _call: PurchaseWithCommentCall;

  constructor(call: PurchaseWithCommentCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PurchaseWithRecipientCall extends ethereum.Call {
  get inputs(): PurchaseWithRecipientCall__Inputs {
    return new PurchaseWithRecipientCall__Inputs(this);
  }

  get outputs(): PurchaseWithRecipientCall__Outputs {
    return new PurchaseWithRecipientCall__Outputs(this);
  }
}

export class PurchaseWithRecipientCall__Inputs {
  _call: PurchaseWithRecipientCall;

  constructor(call: PurchaseWithRecipientCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get quantity(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get comment(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class PurchaseWithRecipientCall__Outputs {
  _call: PurchaseWithRecipientCall;

  constructor(call: PurchaseWithRecipientCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetFundsRecipientCall extends ethereum.Call {
  get inputs(): SetFundsRecipientCall__Inputs {
    return new SetFundsRecipientCall__Inputs(this);
  }

  get outputs(): SetFundsRecipientCall__Outputs {
    return new SetFundsRecipientCall__Outputs(this);
  }
}

export class SetFundsRecipientCall__Inputs {
  _call: SetFundsRecipientCall;

  constructor(call: SetFundsRecipientCall) {
    this._call = call;
  }

  get newRecipientAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFundsRecipientCall__Outputs {
  _call: SetFundsRecipientCall;

  constructor(call: SetFundsRecipientCall) {
    this._call = call;
  }
}

export class SetMetadataRendererCall extends ethereum.Call {
  get inputs(): SetMetadataRendererCall__Inputs {
    return new SetMetadataRendererCall__Inputs(this);
  }

  get outputs(): SetMetadataRendererCall__Outputs {
    return new SetMetadataRendererCall__Outputs(this);
  }
}

export class SetMetadataRendererCall__Inputs {
  _call: SetMetadataRendererCall;

  constructor(call: SetMetadataRendererCall) {
    this._call = call;
  }

  get newRenderer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get setupRenderer(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class SetMetadataRendererCall__Outputs {
  _call: SetMetadataRendererCall;

  constructor(call: SetMetadataRendererCall) {
    this._call = call;
  }
}

export class SetOwnerCall extends ethereum.Call {
  get inputs(): SetOwnerCall__Inputs {
    return new SetOwnerCall__Inputs(this);
  }

  get outputs(): SetOwnerCall__Outputs {
    return new SetOwnerCall__Outputs(this);
  }
}

export class SetOwnerCall__Inputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOwnerCall__Outputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }
}

export class SetSaleConfigurationCall extends ethereum.Call {
  get inputs(): SetSaleConfigurationCall__Inputs {
    return new SetSaleConfigurationCall__Inputs(this);
  }

  get outputs(): SetSaleConfigurationCall__Outputs {
    return new SetSaleConfigurationCall__Outputs(this);
  }
}

export class SetSaleConfigurationCall__Inputs {
  _call: SetSaleConfigurationCall;

  constructor(call: SetSaleConfigurationCall) {
    this._call = call;
  }

  get publicSalePrice(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get maxSalePurchasePerAddress(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get publicSaleStart(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get publicSaleEnd(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get presaleStart(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get presaleEnd(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get presaleMerkleRoot(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class SetSaleConfigurationCall__Outputs {
  _call: SetSaleConfigurationCall;

  constructor(call: SetSaleConfigurationCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class UpdateCreateReferralCall extends ethereum.Call {
  get inputs(): UpdateCreateReferralCall__Inputs {
    return new UpdateCreateReferralCall__Inputs(this);
  }

  get outputs(): UpdateCreateReferralCall__Outputs {
    return new UpdateCreateReferralCall__Outputs(this);
  }
}

export class UpdateCreateReferralCall__Inputs {
  _call: UpdateCreateReferralCall;

  constructor(call: UpdateCreateReferralCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateCreateReferralCall__Outputs {
  _call: UpdateCreateReferralCall;

  constructor(call: UpdateCreateReferralCall) {
    this._call = call;
  }
}

export class UpdateMarketFilterSettingsCall extends ethereum.Call {
  get inputs(): UpdateMarketFilterSettingsCall__Inputs {
    return new UpdateMarketFilterSettingsCall__Inputs(this);
  }

  get outputs(): UpdateMarketFilterSettingsCall__Outputs {
    return new UpdateMarketFilterSettingsCall__Outputs(this);
  }
}

export class UpdateMarketFilterSettingsCall__Inputs {
  _call: UpdateMarketFilterSettingsCall;

  constructor(call: UpdateMarketFilterSettingsCall) {
    this._call = call;
  }

  get args(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class UpdateMarketFilterSettingsCall__Outputs {
  _call: UpdateMarketFilterSettingsCall;

  constructor(call: UpdateMarketFilterSettingsCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class UpdateRoyaltyMintScheduleCall extends ethereum.Call {
  get inputs(): UpdateRoyaltyMintScheduleCall__Inputs {
    return new UpdateRoyaltyMintScheduleCall__Inputs(this);
  }

  get outputs(): UpdateRoyaltyMintScheduleCall__Outputs {
    return new UpdateRoyaltyMintScheduleCall__Outputs(this);
  }
}

export class UpdateRoyaltyMintScheduleCall__Inputs {
  _call: UpdateRoyaltyMintScheduleCall;

  constructor(call: UpdateRoyaltyMintScheduleCall) {
    this._call = call;
  }

  get newSchedule(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateRoyaltyMintScheduleCall__Outputs {
  _call: UpdateRoyaltyMintScheduleCall;

  constructor(call: UpdateRoyaltyMintScheduleCall) {
    this._call = call;
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawRewardsCall extends ethereum.Call {
  get inputs(): WithdrawRewardsCall__Inputs {
    return new WithdrawRewardsCall__Inputs(this);
  }

  get outputs(): WithdrawRewardsCall__Outputs {
    return new WithdrawRewardsCall__Outputs(this);
  }
}

export class WithdrawRewardsCall__Inputs {
  _call: WithdrawRewardsCall;

  constructor(call: WithdrawRewardsCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawRewardsCall__Outputs {
  _call: WithdrawRewardsCall;

  constructor(call: WithdrawRewardsCall) {
    this._call = call;
  }
}
